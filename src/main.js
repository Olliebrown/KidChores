// Import bootstrap's contents for webpack (not used below)
// These lines simply ensure that bootstrap is placed in the bundle files
// that are generated by webpack so we don't have to link them separately
import 'bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css'

// Load customized CSS after bootstrap css
import './index.css'

// Import jQuery as the usual '$' variable
import $ from 'jquery'

// Import helper functions from other modules
import { currentHourLocal } from './utils'
import { retrieveCategorySchema } from './data'
import { checkAndDecodeToken, makeNewUser, loginExistingUser, logoutUser, updateUserState } from './user'

// ID used for the main Bootstrap accordion container
const ACCORDION_ID = 'taskCategoriesAccordion'

// Identifies the default collapse category while constructing the task matrix
let DEFAULT_COLLAPSE = null
let userInfo = null

// Runs when the document is fully loaded and the DOM is ready
$(document).ready(() => {
  // Get information about the user
  checkAndDecodeToken().then((data) => {
    console.log(JSON.stringify(data, null, 2))
    userInfo = data
    updateUserState(userInfo)
    retrieveCategorySchema(processTaskData)
  })

  // Setup form callbacks
  $('#loginUserForm').on('submit', loginSubmit)
  $('#newUserForm').on('submit', newUserSubmit)

  // Setup modal links
  $('#loginLink').click((event) => {
    event.preventDefault()
    $('#loginModal').modal('show')
  })

  $('#logoutLink').click((event) => {
    event.preventDefault()
    logoutUser()
    userInfo = undefined
    updateUserState(userInfo)
    retrieveCategorySchema(processTaskData)
  })

  $('#newUserLink').click((event) => {
    event.preventDefault()
    $('#newUserModel').modal('show')
  })

  // Set custom validity check for input field
  $('#inputPasswordVerify').on('input', (e) => {
    if ($('#inputNewPassword').val() !== $('#inputPasswordVerify').val()) {
      e.target.setCustomValidity('Passwords do not match')
    } else {
      e.target.setCustomValidity('')
    }
  })
})

function loginSubmit (event) {
  event.preventDefault()
  loginExistingUser().then((loginInfo) => {
    if (loginInfo) {
      userInfo = loginInfo
      retrieveCategorySchema(processTaskData)
    }
  })
}

function newUserSubmit (event) {
  event.preventDefault()
  makeNewUser()
}

function processTaskData (data) {
  // Clear the category list container first
  $('#category-list').empty()
  
  // Check if we were properly authorized
  if (data.unauthorized) {
    let loginMessage = $('<h5/>').addClass('text-center m-3').text('Please login (click login in the nav bar)')
    $('#category-list').append(loginMessage)
  } else {
    // Create the task matrix accordion and append it to our main content area
    let taskMatrix = buildTaskMatrix(data)
    if (taskMatrix != null) {
      $('#category-list').append(taskMatrix)
      toggleDefaultCollapse()
    }
  }
}

// Build the task matrix
function buildTaskMatrix (data) {
  // Sanity check on the task data before we proceed
  if (!data.categories || !Array.isArray(data.categories)) {
    console.error('Badly formed global task data (missing categories array)')
    return null
  }

  // Create our primary accordion container
  let accordionTag = $('<div/>').addClass('accordion').attr('id', ACCORDION_ID)

  // Keep track of which one should be open by default
  let currentHour = currentHourLocal()
  DEFAULT_COLLAPSE = null
  let defaultCollapseHour = 0

  // Create each collapseable card for the categories and add to accordion
  data.categories.forEach((category) => {
    let categoryCard = buildCategory(category)
    if (categoryCard != null) {
      accordionTag.append(categoryCard)
      if (category.starthour <= currentHour && category.starthour > defaultCollapseHour) {
        defaultCollapseHour = category.starthour
        DEFAULT_COLLAPSE = category.id
      }
    }
  })

  // Return the according as the task matrix
  return accordionTag
}

// Function to toggle the default collapse (must happen after adding to DOM)
function toggleDefaultCollapse () {
  // Toggle the default collapse if we found one
  if (DEFAULT_COLLAPSE) {
    let collapseID = `#collapse-cat${DEFAULT_COLLAPSE}`
    $(collapseID).collapse({ toggle: true })
  }
}

function buildCategory (categoryData) {
  // Sanity check on the data before we proceed
  if (!categoryData.id || !categoryData.name || !categoryData.tasks || !Array.isArray(categoryData.tasks)) {
    console.error('Badly formed category data (missing id, name, or tasks array')
    return null
  }

  /* Here's the structure of the HTML we are going to build for a category
    <div class="card">
      <div class="card-header" id="headingOne">
        <h5 class="mb-0">
          <button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
            Collapsible Group Item #1
          </button>
        </h5>
      </div>

      <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionExample">
        <div class="card-body">
        </div>
      </div>
    </div>
  */

  // Build some ID strings for use as we made the complex accordion card tags
  let categoryID = `cat${categoryData.id}`
  let headerID = `heading-${categoryID}`
  let collapseID = `collapse-${categoryID}`

  // Build the category card header which will trigger the collapse
  let cardHeaderTag = $('<div/>').addClass('cardHeader').attr('id', headerID)
  let headerTextTag = $('<h4/>').addClass('card-title m-3').attr('data-toggle', 'collapse')
    .attr('data-target', `#${collapseID}`).attr('aria-expanded', false)
    .attr('aria-controls', collapseID).text(categoryData.name)

  cardHeaderTag.append(headerTextTag)

  // Build the category card collapse which holds the body of the category card
  let cardCollapseTag = $('<div/>').addClass('collapse').attr('id', collapseID)
    .attr('aria-labelledby', headerID).attr('data-parent', `#${ACCORDION_ID}`)
  let cardBody = $('<div/>').addClass('card-body')
  cardCollapseTag.append(cardBody)

  // Build the inner tasks cards stored in a card column container
  let tasksCardsTag = $('<div/>').addClass('card-columns')
  categoryData.tasks.forEach((task) => {
    let cardTag = buildCard(task, categoryData.id)
    if (cardTag != null) {
      tasksCardsTag.append(cardTag)
    }
  })

  // Put the inner task cards in the body of the category card collapse
  cardBody.append(tasksCardsTag)

  // Put the category card all together
  let categoryCardTag = $('<div/>').addClass('card categoryCard').attr('id', categoryID)
  categoryCardTag.append(cardHeaderTag)
  categoryCardTag.append(cardCollapseTag)

  // Return the category card
  return categoryCardTag
}

function buildCard (cardData, catID) {
  // Sanity check on the data before we proceed
  if (!cardData.id || !cardData.name || !cardData.details) {
    console.error('Badly formed individual task (missing id, name, or details)')
    return null
  }

  // Make the task ID string
  let taskID = `task${cardData.id}`

  // Make the header with a nice looking title
  let cardHeaderTag = $('<div/>').addClass('card-header')
  cardHeaderTag.append($('<h5/>').addClass('card-title').text(cardData.name))

  // Make the body of the card with centered text
  let cardBodyTag = $('<div/>').addClass('card-body text-center')
  cardBodyTag.append($('<p/>').addClass('card-text').text(cardData.details))

  // Make a footer with a couple of butons (we'll hide one later)
  let cardFooterTag = $('<div/>').addClass('card-footer')
  cardFooterTag.append($('<a/>').addClass('btn btn-success').text('Did It!'))
  cardFooterTag.append($('<a/>').addClass('btn btn-danger').text('Nope!'))

  // Put the final card together and return it
  // Note: we override default borders which may be set wrong due to nesting cards
  // these overrides assume it is placed in a card columns or card grid container
  let cardTag = $('<div/>').addClass('card border rounded taskCard').attr('id', taskID)
  cardTag.append(cardHeaderTag)
  cardTag.append(cardBodyTag)
  cardTag.append(cardFooterTag)

  return cardTag
}
